// ===
// Media Queries
// ===

// mq
// Usage:
// @include mq(mobile, largest) {
//  .selector {
//    color: #000;
//  }
// }
@mixin mq($from_device: false, $from_breakpoint: medium, $until_device: false, $until_breakpoint: medium, $and: false, $media-type: $mq_media_type, $bps: $breakpoints) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from_device {
    // $min-width: em(get_breakpoint($from_device, $from_breakpoint, $bps));
    // $min-width: px_to_rem(get_breakpoint($from_device, $from_breakpoint, $bps));
    $min-width: get_breakpoint($from_device, $from_breakpoint, $bps) * 1px;
  }

  // Until: that breakpoint (exclusive)
  @if $until_device {
    // $max-width: em(get_breakpoint($until_device, $until_breakpoint, $bps)) - .01em;
    // $max-width: px_to_rem((get_breakpoint($until_device, $until_breakpoint, $bps)) - 1);
    $max-width: (get_breakpoint($until_device, $until_breakpoint, $bps) - 1) * 1px;
  }

  @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }

  @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }

  @if $and { $media-query: '#{$media-query} and #{$and}'; }

  // Remove unnecessary media query prefix 'all and '
  @if ($media-type == 'all' and $media-query != '') {
    $media-type: '';
    $media-query: str-slice(unquote($media-query), 6);
  }

  @media #{$media-type + $media-query} {
    @content;
  }
}
